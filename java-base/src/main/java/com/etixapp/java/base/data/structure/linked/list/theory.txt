LinkedList vs. ArrayList
    - ArrayList use indexes -- LinkedList noes not
    - ArrayList elements are stored close each other in memory (one after one, contiguous place in memory) --  LinkedList elements are spread into memory

Complexity:
    - add element to the end: O(1)
    - remove element from the end: O(n) - because to set the TAIL pointer to last element we have to loop through entire list of elements and that because
        we can't move backwards to the list LinkedList
    - add element to the beginning: O(1)
    - remove element from the beginning: O(1)
    - inserting a node: O(n)
    - removing a node: O(n)
    - finding an element: O(n)


    Advantages:

    Dynamic Size: LinkedList can grow or shrink dynamically, making it suitable for varying or unknown data sizes.
    Efficient Insertion and Deletion: Inserting or deleting elements within a LinkedList is efficient, as it does not require shifting elements.
    No Contiguous Memory Requirement: LinkedList does not need contiguous memory allocation, making it flexible and suitable for unpredictable memory situations.
    Easy Modification: LinkedList allows easy modification of elements by changing reference pointers, enabling efficient manipulation.


    Disadvantages:

    Slower Random Access: LinkedList has slower random Access as it requires traversing the list to access elements by index.
    Increased Memory Overhead: LinkedList requires additional memory for references and nodes, increasing memory overhead compared to arrays.
    Inefficient Search: LinkedList has slower search operations, requiring sequential iteration to find specific elements.