

- finding an element by index is O(1) complexity
- finding an element by value is O(n) complexity because we have to loop the entire list


**** Advantages: *****

*** Dynamic Size: Unlike arrays, ArrayLists can dynamically grow or shrink in size as elements are added or removed.
It eliminates the need for manual resizing and allows for handling varying amounts of data conveniently.

*** Easy Element Manipulation: ArrayLists offer methods to add, remove, and modify elements at any position within the list.
Its flexibility simplifies common operations such as insertion, deletion, and updating, making element manipulation more efficient.

*** Random Access: ArrayLists support random Access to elements using their index, enabling quick retrieval and modification of elements at specific positions within the list.
It facilitates efficient element access and enhances overall performance.

*** Compatibility with Java Collection Framework: ArrayLists implement the List interface, making them compatible with other Collection classes in the Java Collections Framework.
Its compatibility allows for seamless integration with various algorithms and operations provided by the framework.

**** Disadvantages ****:

*** Higher Memory Overhead: ArrayLists require additional memory to maintain their internal structure, resulting in higher memory overhead compared to arrays.
It can be a concern when dealing with large collections of elements.

*** Slower Insertion and Deletion: Inserting or deleting elements in the middle of an ArrayList requires shifting elements, which can be time-consuming for large lists.
In scenarios where frequent insertion or deletion operations are expected, other data structures like LinkedList may offer better performance.

*** Limited Performance for Search: Searching for an element in an unsorted ArrayList requires iterating over the elements until a match is found.
It is a linear search approach that results in slower search performance compared to data structures optimized for searching, such as HashSet or TreeMap.

*** No Primitive Type Support: ArrayLists can only store objects and do not directly support primitive data types like int or char. To store primitive types, wrapper classes like Integer or Character need to be used, leading to potential autoboxing and unboxing overhead.